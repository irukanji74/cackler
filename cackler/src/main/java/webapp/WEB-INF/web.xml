<?xml version="1.0" encoding="ISO-8859-1"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
	      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0" metadata-complete="true">

	<display-name>Cackler</display-name>
	<description> Sample application</description>
	
<!-- In applicationContext.xml you might have… hibernate configuration and 
		mappings <import resource="applicationContext-hibernate.xml"/> -->
	<!-- There are two types of contexts we are dealing with: 
	    1: root context 
		(parent context. Typically include all jdbc(ORM, Hibernate) initialisation 
		and other spring security related configuration) 
		2: individual servlet context 
		(child context.Typically Dispatcher Servlet Context and initialise all beans 
		related to spring-mvc (controllers , URL Mapping etc)). -->
		
	<!-- Загружается профиль по дефолту, если потребую ctx.getEnvironment().setActiveProfiles("custom"); 
		то этот профиль НЕ будет грузиться 
		the reason is that since you want this in your root application context, loaded up through ContextLoaderListener, 
		the way to specify profile is not through the DispatcherServlet's init param, 
		but ServletContext's init param, this way in your web.xml file 
	-->
	<!-- When using Spring JDBC, use the following: --> 
	<context-param> 
	     <param-name>spring.profiles.active</param-name>
	      <param-value>jdbc</param-value> 
	</context-param>
	 
	<!-- When using Spring jpa, use the following: 
	<context-param>
		<param-name>spring.profiles.active</param-name>
		<param-value>jpa</param-value>
	</context-param>
     -->

	<!-- the CallMonitoringAspect counts invocations on classes with @Repository 
		on them. Classes in spring-data-jpa don't have that annotation -->
	<!-- When using Spring Data JPA, uncomment the following: -->
	<!-- <context-param> 
	      <param-name>spring.profiles.active</param-name> 
	      <param-value>spring-data-jpa</param-value> 
	     </context-param> -->

	<!-- - Location of the XML file that defines the root application context. 
		- Applied by ContextLoaderListener. -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring/business-config.xml, classpath:spring/tools-config.xml</param-value>
	</context-param>

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- - Servlet that dispatches request to registered handlers (Controller implementations). 
		The DispatcherServlet in its init method also creates an 
		ApplicationContext, but this one should load_in only the Web Tier beans, 
		like your Controllers, ViewResolvers, MappingHandlers etc. The Web Tier beans(Controllers, 
		) can see the Middle Tier(transactional services, data access objects, or 
		other objects that you might want to use (and re-use) across the application) 
		beans, but not the other way around. -->
	<servlet>
		<servlet-name>cackler</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/mvc-core-config.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>cackler</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>





	<!-- Dandelion servlet definition and mapping 
	<servlet>
		<servlet-name>dandelionServlet</servlet-name>
		<servlet-class>com.github.dandelion.core.web.DandelionServlet</servlet-class>
		<load-on-startup>2</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>dandelionServlet</servlet-name>
		<url-pattern>/dandelion-assets/*</url-pattern>
	</servlet-mapping>

	used to provide the ability to enter Chinese characters inside the  Owner Form 
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	Dandelion filter definition and mapping 
	<filter>
		<filter-name>dandelionFilter</filter-name>
		<filter-class>com.github.dandelion.core.web.DandelionFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>dandelionFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	Dandelion-Datatables filter, used for basic export 
	<filter>
		<filter-name>datatables</filter-name>
		<filter-class>com.github.dandelion.datatables.core.web.filter.DatatablesFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>datatables</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	No need for welcome-file declaration here. See inside spring/mvc-core-config.xml 
		: <mvc:view-controller path="/" view-name="welcome" /> -->

</web-app>
